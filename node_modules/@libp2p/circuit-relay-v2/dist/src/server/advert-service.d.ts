import { TypedEventEmitter } from '@libp2p/interface';
import type { ComponentLogger, ContentRouting, Startable } from '@libp2p/interface';
export interface AdvertServiceInit {
    /**
     * How long to wait after startup to begin advertising the service
     * - if some configured content routers take a while to warm up (for
     * example, the DHT needs some peers to be able to publish) this
     * value should be high enough that they will have warmed up
     */
    bootDelay?: number;
}
export interface AdvertServiceComponents {
    contentRouting: ContentRouting;
    logger: ComponentLogger;
}
export interface AdvertServiceEvents {
    'advert:success': CustomEvent<unknown>;
    'advert:error': CustomEvent<Error>;
}
export declare class AdvertService extends TypedEventEmitter<AdvertServiceEvents> implements Startable {
    private readonly contentRouting;
    private timeout?;
    private started;
    private readonly bootDelay;
    private readonly log;
    /**
     * Creates an instance of Relay
     */
    constructor(components: AdvertServiceComponents, init?: AdvertServiceInit);
    isStarted(): boolean;
    /**
     * Start Relay service
     */
    start(): void;
    /**
     * Stop Relay service
     */
    stop(): void;
    /**
     * Advertise hop relay service in the network.
     */
    _advertiseService(): Promise<void>;
}
//# sourceMappingURL=advert-service.d.ts.map