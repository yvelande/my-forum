import type { QueryFunc } from './types.js';
import type { QueryEvent } from '../index.js';
import type { RoutingTable } from '../routing-table/index.js';
import type { ComponentLogger, Metrics, PeerId, RoutingOptions, Startable } from '@libp2p/interface';
import type { DeferredPromise } from 'p-defer';
export interface CleanUpEvents {
    'cleanup': CustomEvent;
}
export interface QueryManagerInit {
    logPrefix: string;
    disjointPaths?: number;
    alpha?: number;
    initialQuerySelfHasRun: DeferredPromise<void>;
    routingTable: RoutingTable;
}
export interface QueryManagerComponents {
    peerId: PeerId;
    metrics?: Metrics;
    logger: ComponentLogger;
}
export interface QueryOptions extends RoutingOptions {
    /**
     * A timeout for subqueries executed as part of the main query
     */
    queryFuncTimeout?: number;
    isSelfQuery?: boolean;
}
/**
 * Keeps track of all running queries
 */
export declare class QueryManager implements Startable {
    disjointPaths: number;
    private readonly alpha;
    private readonly shutDownController;
    private running;
    private queries;
    private readonly logger;
    private readonly peerId;
    private readonly routingTable;
    private initialQuerySelfHasRun?;
    private readonly logPrefix;
    private readonly metrics?;
    constructor(components: QueryManagerComponents, init: QueryManagerInit);
    isStarted(): boolean;
    /**
     * Starts the query manager
     */
    start(): Promise<void>;
    /**
     * Stops all queries
     */
    stop(): Promise<void>;
    run(key: Uint8Array, queryFunc: QueryFunc, options?: QueryOptions): AsyncGenerator<QueryEvent>;
}
//# sourceMappingURL=manager.d.ts.map