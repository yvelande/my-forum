import { type RTCPeerConnection } from '../webrtc/index.js';
import { type WebRTCTransportMetrics } from './transport.js';
import type { DataChannelOptions } from '../index.js';
import type { LoggerOptions } from '@libp2p/interface';
import type { ConnectionManager, IncomingStreamData, TransportManager } from '@libp2p/interface-internal';
import type { Multiaddr } from '@multiformats/multiaddr';
export interface IncomingStreamOpts extends IncomingStreamData {
    rtcConfiguration?: RTCConfiguration;
    dataChannelOptions?: Partial<DataChannelOptions>;
    signal: AbortSignal;
}
export interface ConnectOptions extends LoggerOptions {
    peerConnection: RTCPeerConnection;
    multiaddr: Multiaddr;
    connectionManager: ConnectionManager;
    transportManager: TransportManager;
    dataChannelOptions?: Partial<DataChannelOptions>;
    signal?: AbortSignal;
    metrics?: WebRTCTransportMetrics;
}
export declare function initiateConnection({ peerConnection, signal, metrics, multiaddr: ma, connectionManager, transportManager, log }: ConnectOptions): Promise<{
    remoteAddress: Multiaddr;
}>;
//# sourceMappingURL=initiate-connection.d.ts.map