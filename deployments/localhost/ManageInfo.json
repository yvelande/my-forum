{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userInfoAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contentInfoAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenInfoAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "contentInfo",
      "outputs": [
        {
          "internalType": "contract ContentInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commentId",
          "type": "uint256"
        }
      ],
      "name": "deleteComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "complainId",
          "type": "uint256"
        }
      ],
      "name": "deleteComplain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contentId",
          "type": "uint256"
        }
      ],
      "name": "deleteContent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommitMembers",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getTopAssetUsers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_complaintId",
          "type": "uint256"
        }
      ],
      "name": "getVoteResults",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "name": "isCommitteeMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "complainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "isVote",
          "type": "uint256"
        }
      ],
      "name": "makeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnCommitMembers",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "contract TokenERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "uint256ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "contract UserInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a944b990cacd6a5cabbac4619f937b8c136b477a64bd36f88b42ac75169dcd7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1773126",
    "logsBloom": "0x
    "blockHash": "0x30572ee6da921275f1fc820b69b03529c3246b452d4e23d307cdc41de888f967",
    "transactionHash": "0x3a944b990cacd6a5cabbac4619f937b8c136b477a64bd36f88b42ac75169dcd7",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1773126",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "7d8474b8c1ac254c152e9cf6e6bd4150",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userInfoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contentInfoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenInfoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"contentInfo\",\"outputs\":[{\"internalType\":\"contract ContentInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commentId\",\"type\":\"uint256\"}],\"name\":\"deleteComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"complainId\",\"type\":\"uint256\"}],\"name\":\"deleteComplain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"deleteContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitMembers\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getTopAssetUsers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_complaintId\",\"type\":\"uint256\"}],\"name\":\"getVoteResults\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"isCommitteeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"complainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isVote\",\"type\":\"uint256\"}],\"name\":\"makeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnCommitMembers\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"contract TokenERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uint256ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"contract UserInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ManageInfo.sol\":\"ManageInfo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ContentInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ncontract ContentInfo {\\n    struct Content {\\n        uint256 contentId; // \\u6587\\u7ae0id\\n        uint256 userId; // \\u7528\\u6237id\\n        string title; // \\u6807\\u9898\\n        string content; // \\u5185\\u5bb9\\n        uint256 updateTime; // \\u66f4\\u65b0\\u65f6\\u95f4\\n        uint256 praiseCount; // \\u70b9\\u8d5e\\u6570\\n        uint256 contentState; //\\u6587\\u7ae0\\u72b6\\u6001  1\\u5b58\\u5728 0\\u5220\\u9664\\n    }\\n\\n    struct Comment {\\n        uint256 contentId; // \\u6587\\u7ae0ID\\n        uint256 userId; // \\u7528\\u6237ID\\n        uint256 commentId; //\\u8bc4\\u8bbaID\\n        string comment; // \\u8bc4\\u8bba\\u5185\\u5bb9\\n        uint256 updateTime; // \\u8bc4\\u8bba\\u53d1\\u8868\\u65f6\\u95f4\\n        uint256 praiseCount; // \\u8d5e\\u7684\\u6570\\n        uint256 commentState; // \\u8bc4\\u8bba\\u72b6\\u6001  1\\u5b58\\u5728 0\\u5220\\u9664\\n    }\\n\\n    struct Complain {\\n        uint256 complaintId; // \\u6295\\u8bc9id\\n        uint256 contentId; // \\u6587\\u7ae0ID\\n        uint256 userId; // \\u7528\\u6237ID\\n        uint256 commentId; // \\u8bc4\\u8bbaID\\n        string content; // \\u6295\\u8bc9\\u5185\\u5bb9\\n        uint256 updateTime; // \\u6295\\u8bc9\\u53d1\\u8868\\u65f6\\u95f4\\n        uint256 complainState; // \\u8bc4\\u8bba\\u72b6\\u6001  1\\u5b58\\u5728 0\\u5220\\u9664\\n    }\\n\\n    struct ReturnContent {\\n        string contentId; // \\u6587\\u7ae0id\\n        string userId; // \\u7528\\u6237id\\n        string title; // \\u6807\\u9898\\n        string content; // \\u5185\\u5bb9\\n        string updateTime; // \\u66f4\\u65b0\\u65f6\\u95f4\\n        string praiseCount; // \\u70b9\\u8d5e\\u6570\\n        string contentState; //\\u6587\\u7ae0\\u72b6\\u6001\\n    }\\n\\n    struct ReturnComment {\\n        string contentId; // \\u6587\\u7ae0id\\n        string userId; // \\u7528\\u6237id\\n        string commentId; // \\u8bc4\\u8bbaid\\n        string comment; // \\u8bc4\\u8bba\\u5185\\u5bb9\\n        string updateTime; // \\u66f4\\u65b0\\u65f6\\u95f4\\n        string praiseCount; // \\u70b9\\u8d5e\\u6570\\n        string commentState; // \\u8bc4\\u8bba\\u72b6\\u6001\\n    }\\n\\n    struct ReturnComplain {\\n        string complaintId; // \\u6295\\u8bc9id\\n        string contentId; // \\u6587\\u7ae0ID\\n        string userId; // \\u7528\\u6237ID\\n        string commentId; // \\u8bc4\\u8bbaID\\n        string content; // \\u6295\\u8bc9\\u5185\\u5bb9\\n        string updateTime; // \\u6295\\u8bc9\\u53d1\\u8868\\u65f6\\u95f4\\n        string complainState; // \\u6295\\u8bc9\\u72b6\\u6001\\n    }\\n\\n    mapping(uint256 => Content) public contentMap;\\n    uint256[] public contentIds;\\n    uint256[] public complainIds;\\n    mapping(uint256 => Comment) public commentMap;\\n    mapping(uint256 => Complain) public complainMap;\\n    mapping(uint256 => uint256[]) public contentComments; // \\u6620\\u5c04 contentId \\u5230\\u8bc4\\u8bba\\u6570\\u7ec4\\n\\n    // event UserRegistered(string userId);\\n    event ContentCreated(uint256 contentId);\\n    event PraiseDone(uint256 praiseCount); //\\u8fd9\\u662f\\u5bf9\\u5e16\\u5b50\\u8fdb\\u884c\\u8bc4\\u8bba\\u7684\\u5185\\u5bb9\\n    event CommentCreated(uint256 commentId);\\n    event PraiseCommentDone(uint256 praiseCount);\\n    event ComplaintCreated(uint256 complaintId);\\n\\n    function createContent(\\n        uint256 _userId,\\n        string memory _title,\\n        string memory _content\\n    ) public {\\n        uint256 _contentId = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, _userId, _title))\\n        );\\n        contentMap[_contentId] = Content(\\n            _contentId,\\n            _userId,\\n            _title,\\n            _content,\\n            block.timestamp,\\n            0,\\n            1\\n        );\\n        contentIds.push(_contentId);\\n        emit ContentCreated(_contentId);\\n    }\\n\\n    function getContent(\\n        uint256 _contentId\\n    ) public view returns (ReturnContent memory) {\\n        Content memory content = contentMap[_contentId];\\n        ReturnContent memory returnContent = ReturnContent(\\n            uint256ToString(content.contentId),\\n            uint256ToString(content.userId),\\n            content.title,\\n            content.content,\\n            uint256ToString(content.updateTime),\\n            uint256ToString(content.praiseCount),\\n            uint256ToString(content.contentState)\\n        );\\n        return returnContent;\\n    }\\n\\n    function updateContent(\\n        uint256 _contentId,\\n        string memory _title,\\n        string memory _content\\n    ) public {\\n        Content memory contentOld = contentMap[_contentId];\\n        contentOld.title = _title;\\n        contentOld.content = _content;\\n        contentOld.updateTime = block.timestamp;\\n        contentMap[_contentId] = contentOld;\\n    }\\n\\n    function deleteContent(uint256 _contentId) public {\\n        Content memory contentDelete = contentMap[_contentId];\\n        contentDelete.contentState = 0;\\n        contentMap[_contentId] = contentDelete;\\n    }\\n\\n    function praiseContent(uint256 _contentId) public {\\n        contentMap[_contentId].praiseCount++;\\n        emit PraiseDone(contentMap[_contentId].praiseCount);\\n    }\\n\\n    function getAllContent() public view returns (ReturnContent[] memory) {\\n        uint256 count = contentIds.length;\\n        uint256 existCount = 0;\\n        for (uint256 i = 0; i < count; i++) {\\n            if (contentMap[contentIds[i]].contentState == 1) {\\n                existCount++;\\n            }\\n        }\\n        ReturnContent[] memory allContent = new ReturnContent[](existCount);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < count; i++) {\\n            if (contentMap[contentIds[i]].contentState == 1) {\\n                allContent[index] = getContent(contentIds[i]);\\n                index++;\\n            }\\n        }\\n        return allContent;\\n    }\\n\\n    //\\u521b\\u5efa\\u8bc4\\u8bba\\n    function createComment(\\n        uint256 _contentId,\\n        uint256 _userId,\\n        string memory _comment\\n    ) public {\\n        //\\u8bb0\\u5f97\\u6700\\u540e\\u5f00\\u542f\\n        // require(\\n        //     contentMap[_contentId].contentState == 1,\\n        //     \\\"Content does not exist\\\"\\n        // );\\n\\n        // Generate comment ID\\n        uint256 _commentId = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, _contentId, _userId))\\n        );\\n\\n        // Create the comment struct\\n        Comment memory comment = Comment(\\n            _contentId,\\n            _userId,\\n            _commentId,\\n            _comment,\\n            block.timestamp,\\n            0, // Initial praise count is 0\\n            1 // Comment state is active\\n        );\\n        commentMap[_commentId] = comment;\\n        // // Update the content's comment count\\n        contentComments[_contentId].push(_commentId);\\n        // Trigger an event\\n        emit CommentCreated(_commentId);\\n    }\\n\\n    // \\u66f4\\u65b0\\u8bc4\\u8bba\\n    function updateComment(uint256 _commentId, string memory _comment) public {\\n        // \\u786e\\u4fdd\\u8bc4\\u8bba\\u5b58\\u5728\\n        // require(\\n        //     commentMap[_commentId].commentState == 1,\\n        //     \\\"Comment does not exist\\\"\\n        // );\\n\\n        // \\u66f4\\u65b0\\u8bc4\\u8bba\\u5185\\u5bb9\\n        Comment memory comment = commentMap[_commentId];\\n        comment.comment = _comment;\\n        comment.updateTime = block.timestamp;\\n        commentMap[_commentId] = comment;\\n    }\\n\\n    // \\u83b7\\u53d6\\u8bc4\\u8bba\\n    function getComment(\\n        uint256 _commentId\\n    ) public view returns (ReturnComment memory) {\\n        // \\u786e\\u4fdd\\u8bc4\\u8bba\\u5b58\\u5728\\n        // require(\\n        //     commentMap[_commentId].commentState == 1,\\n        //     \\\"Comment does not exist\\\"\\n        // );\\n        Comment memory comment = commentMap[_commentId];\\n        ReturnComment memory returnComment = ReturnComment(\\n            uint256ToString(comment.contentId),\\n            uint256ToString(comment.userId),\\n            uint256ToString(comment.commentId),\\n            comment.comment,\\n            uint256ToString(comment.updateTime),\\n            uint256ToString(comment.praiseCount),\\n            uint256ToString(comment.commentState)\\n        );\\n        // \\u8fd4\\u56de\\u8bc4\\u8bba\\u5185\\u5bb9\\n        return returnComment;\\n    }\\n\\n    // \\u5220\\u9664\\u8bc4\\u8bba\\n    function deleteComment(uint256 _commentId) public {\\n        // \\u786e\\u4fdd\\u8bc4\\u8bba\\u5b58\\u5728\\n        // require(\\n        //     commentMap[_commentId].commentState == 1,\\n        //     \\\"Comment does not exist\\\"\\n        // );\\n\\n        // \\u5220\\u9664\\u8bc4\\u8bba\\n        Comment memory commentDelete = commentMap[_commentId];\\n        commentDelete.commentState = 0;\\n        commentMap[_commentId] = commentDelete;\\n    }\\n\\n    function getCommentsByContentId(\\n        uint256 _contentId\\n    ) public view returns (ReturnComment[] memory) {\\n        //contentId\\u5bf9\\u5e94\\u7684\\u8bc4\\u8bba\\u7684\\u6570\\u7ec4\\n        uint256[] memory commmentArray = contentComments[_contentId];\\n        uint256 count = commmentArray.length;\\n        uint256 existCount = 0;\\n        // \\u904d\\u5386\\u6240\\u6709\\u8bc4\\u8bba\\uff0c\\u7edf\\u8ba1\\u7b26\\u5408\\u6761\\u4ef6\\u7684\\u8bc4\\u8bba\\u6570\\u91cf\\n        for (uint256 i = 0; i < count; i++) {\\n            if (commentMap[commmentArray[i]].commentState == 1) {\\n                existCount++;\\n            }\\n        }\\n        // \\u521b\\u5efa\\u4e00\\u4e2a\\u6570\\u7ec4\\u7528\\u4e8e\\u5b58\\u50a8\\u7b26\\u5408\\u6761\\u4ef6\\u7684\\u8bc4\\u8bba\\n        ReturnComment[] memory comments = new ReturnComment[](existCount);\\n        uint256 index = 0;\\n        // \\u904d\\u5386\\u6240\\u6709\\u8bc4\\u8bba\\uff0c\\u5c06\\u7b26\\u5408\\u6761\\u4ef6\\u7684\\u8bc4\\u8bba\\u5b58\\u5165\\u6570\\u7ec4\\n        for (uint256 i = 0; i < count; i++) {\\n            if (commentMap[commmentArray[i]].commentState == 1) {\\n                comments[index] = getComment(commmentArray[i]);\\n                index++;\\n            }\\n        }\\n        // \\u8fd4\\u56de\\u6240\\u6709\\u8bc4\\u8bba\\n        return comments;\\n    }\\n\\n    function praiseComment(uint256 _commentId) public {\\n        // \\u786e\\u4fdd\\u8bc4\\u8bba\\u5b58\\u5728\\n        // require(\\n        //     commentMap[_commentId].commentState == 1,\\n        //     \\\"Comment does not exist\\\"\\n        // );\\n\\n        // \\u589e\\u52a0\\u8bc4\\u8bba\\u7684\\u8d5e\\u6570\\n        // Comment memory comment = commentMap[_commentId];\\n        // comment.praiseCount++;\\n        commentMap[_commentId].praiseCount++;\\n        emit PraiseCommentDone(commentMap[_commentId].praiseCount);\\n        // commentMap[_commentId] = comment;\\n        // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n    }\\n\\n    function createComplaint(\\n        uint256 _contentId,\\n        uint256 _userId,\\n        uint256 _commentId,\\n        string memory _complaintContent\\n    ) public {\\n        uint256 _complaintId = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp,\\n                    _contentId,\\n                    _userId,\\n                    _commentId\\n                )\\n            )\\n        );\\n        complainMap[_complaintId] = Complain(\\n            _complaintId,\\n            _contentId,\\n            _userId,\\n            _commentId,\\n            _complaintContent,\\n            block.timestamp,\\n            1 // \\u6295\\u8bc9\\u72b6\\u6001\\u4e3a\\u5b58\\u5728\\n        );\\n        complainIds.push(_complaintId);\\n        emit ComplaintCreated(_complaintId);\\n    }\\n\\n    function getComplain(\\n        uint256 _complaintId\\n    ) public view returns (ReturnComplain memory) {\\n        // \\u786e\\u4fdd\\u6295\\u8bc9\\u5b58\\u5728\\n        // require(\\n        //     complainMap[_complaintId].complainState == 1,\\n        //     \\\"Complain does not exist\\\"\\n        // );\\n\\n        Complain memory complain = complainMap[_complaintId];\\n        ReturnComplain memory returnComplain = ReturnComplain(\\n            uint256ToString(complain.complaintId),\\n            uint256ToString(complain.contentId),\\n            uint256ToString(complain.userId),\\n            uint256ToString(complain.commentId),\\n            complain.content,\\n            uint256ToString(complain.updateTime),\\n            uint256ToString(complain.complainState)\\n        );\\n        // \\u8fd4\\u56de\\u6295\\u8bc9\\u5185\\u5bb9\\n        return returnComplain;\\n    }\\n\\n    // \\u5220\\u9664\\u6295\\u8bc9\\n    function deleteComplain(uint256 _complainId) public {\\n        // \\u786e\\u4fdd\\u6295\\u8bc9\\u5b58\\u5728\\n        // require(\\n        //     complainMap[_complainId].complainState == 1,\\n        //     \\\"Complain does not exist\\\"\\n        // );\\n\\n        // \\u5220\\u9664\\u6295\\u8bc9\\n        Complain memory complainDelete = complainMap[_complainId];\\n        complainDelete.complainState = 0;\\n        complainMap[_complainId] = complainDelete;\\n    }\\n\\n    // \\u83b7\\u53d6\\u88ab\\u6295\\u8bc9\\u7684\\u5185\\u5bb9\\n    function getAllComplain() public view returns (ReturnComplain[] memory) {\\n        uint256 count = complainIds.length;\\n        uint256 complainedCount = 0;\\n        for (uint256 i = 0; i < count; i++) {\\n            if (complainMap[complainIds[i]].complainState == 1) {\\n                complainedCount++;\\n            }\\n        }\\n        ReturnComplain[] memory complainedContent = new ReturnComplain[](\\n            complainedCount\\n        );\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < count; i++) {\\n            if (complainMap[complainIds[i]].complainState == 1) {\\n                complainedContent[index] = getComplain(complainIds[i]);\\n                index++;\\n            }\\n        }\\n        return complainedContent;\\n    }\\n\\n    // \\u5c06 uint256 \\u7c7b\\u578b\\u8f6c\\u6362\\u4e3a\\u5b57\\u7b26\\u4e32\\n    function uint256ToString(\\n        uint256 value\\n    ) public pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + (value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xf59451f277fc849bbf59e992e729dea547454e990c2c907948e63ea5a572c502\",\"license\":\"MIT\"},\"contracts/ManageInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./UserInfo.sol\\\";\\nimport \\\"./ContentInfo.sol\\\";\\nimport \\\"./TokenERC20.sol\\\";\\n\\ncontract ManageInfo {\\n    UserInfo public userInfo;\\n    ContentInfo public contentInfo;\\n    TokenERC20 public tokenInfo;\\n\\n    // \\u59d4\\u5458\\u4f1a\\u6210\\u5458\\u6295\\u7968\\u7ed3\\u6784\\u4f53\\n    struct Vote {\\n        uint256 voter; // \\u6295\\u7968\\u8005\\u5730\\u5740\\n        uint256 complaintId; // \\u6295\\u8bc9\\u7684ID\\n        uint256 inSupport; // \\u662f\\u5426\\u652f\\u6301\\u6295\\u8bc9 \\\"1\\\"\\u662f\\u652f\\u6301 \\\"0\\\"\\u662f\\u4e0d\\u652f\\u6301\\\"\\n    }\\n    //\\u59d4\\u5458\\u4f1a\\u6210\\u5458\\n    uint256[] commitMember;\\n    // \\u6295\\u7968\\u6570\\u7ec4\\n    mapping(uint256 => Vote[]) complainVotesMap;\\n\\n    constructor(\\n        address _userInfoAddress,\\n        address _contentInfoAddress,\\n        address _tokenInfoAddress\\n    ) {\\n        userInfo = UserInfo(_userInfoAddress);\\n        contentInfo = ContentInfo(_contentInfoAddress);\\n        tokenInfo = TokenERC20(_tokenInfoAddress);\\n    }\\n\\n    function getTopAssetUsers(uint256 count) public returns (uint256[] memory) {\\n        uint256[] memory registeredUserId = userInfo.getRegisteredUserId();\\n        uint256[] memory assetAmounts = new uint256[](registeredUserId.length);\\n\\n        for (uint256 i = 0; i < registeredUserId.length; i++) {\\n            assetAmounts[i] = tokenInfo.getBalance(\\n                userInfo.getUserInfo(registeredUserId[i]).userAddress\\n            );\\n        }\\n\\n        // \\u4f7f\\u7528\\u5927\\u9876\\u5806\\u627e\\u5230\\u524d11\\u540d\\u7528\\u6237\\n        uint256[] memory topUsers = new uint256[](count);\\n        uint256[] memory topAssets = new uint256[](count);\\n\\n        // \\u5efa\\u7acb\\u5927\\u9876\\u5806\\n        for (uint256 i = 0; i < count && i < registeredUserId.length; i++) {\\n            topUsers[i] = registeredUserId[i];\\n            topAssets[i] = assetAmounts[i];\\n            heapify(topAssets, topUsers, i);\\n        }\\n\\n        // \\u7ee7\\u7eed\\u8fed\\u4ee3\\u5269\\u4f59\\u7684\\u7528\\u6237\\n        for (uint256 i = count; i < registeredUserId.length; i++) {\\n            if (assetAmounts[i] > topAssets[0]) {\\n                topAssets[0] = assetAmounts[i];\\n                topUsers[0] = registeredUserId[i];\\n                heapify(topAssets, topUsers, 0);\\n            }\\n        }\\n\\n        return topUsers;\\n    }\\n\\n    // \\u7528\\u4e8e\\u8c03\\u6574\\u5806\\n    function heapify(\\n        uint256[] memory assets,\\n        uint256[] memory users,\\n        uint256 root\\n    ) internal {\\n        uint256 largest = root;\\n        uint256 left = 2 * root + 1;\\n        uint256 right = 2 * root + 2;\\n\\n        if (left < assets.length && assets[left] > assets[largest]) {\\n            largest = left;\\n        }\\n\\n        if (right < assets.length && assets[right] > assets[largest]) {\\n            largest = right;\\n        }\\n\\n        if (largest != root) {\\n            (assets[root], assets[largest]) = (assets[largest], assets[root]);\\n            (users[root], users[largest]) = (users[largest], users[root]);\\n            heapify(assets, users, largest);\\n        }\\n    }\\n\\n    function getCommitMembers() public returns (string[] memory) {\\n        uint256[] memory topAssetUsers = getTopAssetUsers(3);\\n        string[] memory ret = new string[](3);\\n        // uint256[] memory registeredUser = userInfo.getRegisteredUserId();\\n\\n        // // \\u968f\\u673a\\u62bd\\u53d69\\u4f4d\\u7528\\u6237\\n        // uint256[] memory randomUsers = getRandomIds(registeredUser);\\n\\n        // \\u5c06\\u8d44\\u4ea7\\u6392\\u540d\\u524d11\\u7684\\u7528\\u6237\\u548c\\u968f\\u673a\\u62bd\\u53d6\\u76849\\u4f4d\\u7528\\u6237\\u7684 userRole \\u6539\\u4e3a\\u59d4\\u5458\\u4f1a\\u6210\\u5458\\n        for (uint256 i = 0; i < topAssetUsers.length; i++) {\\n            userInfo.changeUserRole(topAssetUsers[i], \\\"1\\\");\\n            ret[i] = uint256ToString(topAssetUsers[i]);\\n        }\\n        // for (uint256 i = 0; i < randomUsers.length; i++) {\\n        //     userInfo.changeUserRole(randomUsers[i], \\\"Committee Member\\\");\\n        // }\\n        commitMember = topAssetUsers;\\n        // \\u8fd4\\u56de\\u59d4\\u5458\\u4f1a\\u6210\\u5458\\n        return ret;\\n    }\\n\\n    function returnCommitMembers() public view returns (string[] memory) {\\n        string[] memory ret = new string[](3);\\n        // uint256[] memory registeredUser = userInfo.getRegisteredUserId();\\n\\n        // // \\u968f\\u673a\\u62bd\\u53d69\\u4f4d\\u7528\\u6237\\n        // uint256[] memory randomUsers = getRandomIds(registeredUser);\\n\\n        // \\u5c06\\u8d44\\u4ea7\\u6392\\u540d\\u524d11\\u7684\\u7528\\u6237\\u548c\\u968f\\u673a\\u62bd\\u53d6\\u76849\\u4f4d\\u7528\\u6237\\u7684 userRole \\u6539\\u4e3a\\u59d4\\u5458\\u4f1a\\u6210\\u5458\\n        for (uint256 i = 0; i < commitMember.length; i++) {\\n            ret[i] = uint256ToString(commitMember[i]);\\n        }\\n        // for (uint256 i = 0; i < randomUsers.length; i++) {\\n        //     userInfo.changeUserRole(randomUsers[i], \\\"Committee Member\\\");\\n        // }\\n        return ret;\\n    }\\n\\n    // \\u8f85\\u52a9\\u51fd\\u6570\\uff1a\\u4ece\\u6ce8\\u518c\\u7528\\u6237\\u4e2d\\u968f\\u673a\\u62bd\\u53d6\\u4e0d\\u91cd\\u590d\\u7684\\u4e5d\\u4e2a\\u5730\\u5740\\n    function getRandomIds(\\n        uint256[] memory registeredUserAddresses\\n    ) internal view returns (uint256[] memory) {\\n        require(\\n            registeredUserAddresses.length >= 9,\\n            \\\"Insufficient registered users\\\"\\n        );\\n\\n        uint256[] memory randomAddresses = new uint256[](9);\\n        bool[] memory selectedIndices = new bool[](\\n            registeredUserAddresses.length\\n        );\\n        uint256 remainingUsers = registeredUserAddresses.length;\\n        uint256 remainingSelections = 9;\\n\\n        // \\u4f7f\\u7528\\u4f2a\\u968f\\u673a\\u6570\\u751f\\u6210\\u5668\\u9009\\u62e9\\u968f\\u673a\\u7528\\u6237\\u5730\\u5740\\n        while (remainingSelections > 0) {\\n            uint256 randomIndex = uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.timestamp,\\n                        block.difficulty,\\n                        block.number\\n                    )\\n                )\\n            ) % remainingUsers;\\n\\n            // \\u5982\\u679c\\u9009\\u62e9\\u7684\\u7d22\\u5f15\\u6ca1\\u6709\\u88ab\\u9009\\u4e2d\\u8fc7\\uff0c\\u5219\\u5c06\\u5176\\u6dfb\\u52a0\\u5230\\u968f\\u673a\\u5730\\u5740\\u6570\\u7ec4\\u4e2d\\uff0c\\u5e76\\u6807\\u8bb0\\u4e3a\\u5df2\\u9009\\u4e2d\\n            if (!selectedIndices[randomIndex]) {\\n                randomAddresses[\\n                    9 - remainingSelections\\n                ] = registeredUserAddresses[randomIndex];\\n                selectedIndices[randomIndex] = true;\\n                remainingSelections--;\\n            }\\n\\n            // \\u5c06\\u5df2\\u9009\\u4e2d\\u7684\\u5730\\u5740\\u79fb\\u81f3\\u672b\\u5c3e\\uff0c\\u907f\\u514d\\u91cd\\u590d\\u9009\\u62e9\\n            if (randomIndex != remainingUsers - 1) {\\n                registeredUserAddresses[randomIndex] = registeredUserAddresses[\\n                    remainingUsers - 1\\n                ];\\n            }\\n\\n            // \\u7f29\\u5c0f\\u53ef\\u9009\\u8303\\u56f4\\n            remainingUsers--;\\n        }\\n\\n        return randomAddresses;\\n    }\\n\\n    function isCommitteeMember(uint256 userId) public view returns (bool) {\\n        for (uint256 i = 0; i < commitMember.length; i++) {\\n            if (commitMember[i] == userId) return true;\\n        }\\n        return false;\\n    }\\n\\n    // \\u8fdb\\u884c\\u6295\\u7968\\n    function makeVote(\\n        uint256 userId,\\n        uint256 complainId,\\n        uint256 isVote\\n    ) public {\\n        // // \\u68c0\\u67e5\\u662f\\u5426\\u4e3a\\u59d4\\u5458\\u4f1a\\u6210\\u5458\\n        // require(\\n        //        isCommitteeMember(userId),\\n        //     \\\"Only committee members can vote\\\"\\n        // );\\n\\n        // \\u68c0\\u67e5\\u7528\\u6237\\u662f\\u5426\\u5df2\\u7ecf\\u6295\\u8fc7\\u7968\\n        // require(\\n        //     !hasVoted(userId, complainId),\\n        //     \\\"You have already voted for this complaint\\\"\\n        // );\\n\\n        // \\u521b\\u5efa\\u6295\\u7968\\u5bf9\\u8c61\\u5e76\\u6dfb\\u52a0\\u5230\\u6295\\u7968\\u6570\\u7ec4\\u4e2d\\n        Vote memory newVote = Vote({\\n            voter: userId,\\n            complaintId: complainId,\\n            inSupport: isVote\\n        });\\n        complainVotesMap[complainId].push(newVote);\\n    }\\n\\n    // \\u5220\\u9664\\u6587\\u7ae0\\n    function deleteContent(uint256 contentId) public {\\n        // \\u5728 ContentInfo \\u5408\\u7ea6\\u4e2d\\u5b9a\\u4e49\\u4e86\\u5220\\u9664\\u6587\\u7ae0\\u7684\\u51fd\\u6570\\uff0c\\u53ef\\u4ee5\\u8c03\\u7528\\u76f8\\u5173\\u51fd\\u6570\\u6765\\u5220\\u9664\\n        contentInfo.deleteContent(contentId);\\n    }\\n\\n    // \\u5220\\u9664\\u8bc4\\u8bba\\n    function deleteComment(uint256 commentId) public {\\n        // \\u5728 ContentInfo \\u5408\\u7ea6\\u4e2d\\u5b9a\\u4e49\\u4e86\\u5220\\u9664\\u8bc4\\u8bba\\u7684\\u51fd\\u6570\\uff0c\\u53ef\\u4ee5\\u8c03\\u7528\\u76f8\\u5173\\u51fd\\u6570\\u6765\\u5220\\u9664\\n        contentInfo.deleteComment(commentId);\\n    }\\n\\n    // \\u5220\\u9664\\u8bc4\\u8bba\\n    function deleteComplain(uint256 complainId) public {\\n        // \\u5728 ContentInfo \\u5408\\u7ea6\\u4e2d\\u5b9a\\u4e49\\u4e86\\u5220\\u9664\\u8bc4\\u8bba\\u7684\\u51fd\\u6570\\uff0c\\u53ef\\u4ee5\\u8c03\\u7528\\u76f8\\u5173\\u51fd\\u6570\\u6765\\u5220\\u9664\\n        contentInfo.deleteComplain(complainId);\\n    }\\n\\n    // \\u83b7\\u53d6\\u6295\\u7968\\u7ed3\\u679c\\n    function getVoteResults(\\n        uint256 _complaintId\\n    ) public view returns (string memory) {\\n        uint256 supportCount = 0;\\n        uint256 oppositionCount = 0;\\n        Vote[] memory votes = complainVotesMap[_complaintId];\\n        for (uint256 i = 0; i < votes.length; i++) {\\n            if (votes[i].inSupport == 1) {\\n                supportCount++;\\n            } else {\\n                oppositionCount++;\\n            }\\n        }\\n        return uint256ToString(supportCount);\\n    }\\n\\n    // \\u68c0\\u67e5\\u7528\\u6237\\u662f\\u5426\\u5df2\\u7ecf\\u6295\\u8fc7\\u7968\\n    function hasVoted(\\n        uint256 _voter,\\n        uint256 _complaintId\\n    ) internal view returns (bool) {\\n        Vote[] memory votes = complainVotesMap[_complaintId];\\n        for (uint256 i = 0; i < votes.length; i++) {\\n            if (votes[i].voter == _voter) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // \\u5c06 uint256 \\u7c7b\\u578b\\u8f6c\\u6362\\u4e3a\\u5b57\\u7b26\\u4e32\\n    function uint256ToString(\\n        uint256 value\\n    ) public pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + (value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa9f0b1e9280c2055f0907cc6ca83057d1e8e66af79be055341a4874f9a0e80c7\",\"license\":\"MIT\"},\"contracts/TokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface tokenRecipient {\\n    function receiveApproval(\\n        address _from,\\n        uint256 _value,\\n        address _token,\\n        bytes calldata _extraData\\n    ) external;\\n}\\n\\ncontract TokenERC20 {\\n    // Public variables of the token\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals = 18;\\n    // 18 decimals is the strongly suggested default, avoid changing it\\n    uint256 public totalSupply;\\n\\n    // This creates an array with all balances\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    // This generates a public event on the blockchain that will notify clients\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // This generates a public event on the blockchain that will notify clients\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    // This notifies clients about the amount burnt\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * Constructor function\\n     *\\n     * Initializes contract with initial supply tokens to the creator of the contract\\n     */\\n    constructor(\\n        uint256 initialSupply,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) {\\n        totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount\\n        balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens\\n        name = tokenName; // Set the name for display purposes\\n        symbol = tokenSymbol; // Set the symbol for display purposes\\n    }\\n\\n    /**\\n     * Internal transfer, only can be called by this contract\\n     */\\n    function _transfer(address _from, address _to, uint256 _value) internal {\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_to != address(0x0));\\n        // Check if the sender has enough\\n        require(balanceOf[_from] >= _value);\\n        // Check for overflows\\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\\n        // Save this for an assertion in the future\\n        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\\n        // Subtract from the sender\\n        balanceOf[_from] -= _value;\\n        // Add the same to the recipient\\n        balanceOf[_to] += _value;\\n        emit Transfer(_from, _to, _value);\\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\\n    }\\n\\n    /**\\n     * Transfer tokens\\n     *\\n     * Send `_value` tokens to `_to` from your account\\n     *\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transfer(\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        _transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Transfer tokens from other address\\n     *\\n     * Send `_value` tokens to `_to` on behalf of `_from`\\n     *\\n     * @param _from The address of the sender\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        require(_value <= allowance[_from][msg.sender]); // Check allowance\\n        allowance[_from][msg.sender] -= _value;\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Set allowance for other address\\n     *\\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\\n     *\\n     * @param _spender The address authorized to spend\\n     * @param _value the max amount they can spend\\n     */\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        allowance[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Set allowance for other address and notify\\n     *\\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\\n     *\\n     * @param _spender The address authorized to spend\\n     * @param _value the max amount they can spend\\n     * @param _extraData some extra information to send to the approved contract\\n     */\\n    function approveAndCall(\\n        address _spender,\\n        uint256 _value,\\n        bytes memory _extraData\\n    ) public returns (bool success) {\\n        tokenRecipient spender = tokenRecipient(_spender);\\n        if (approve(_spender, _value)) {\\n            spender.receiveApproval(\\n                msg.sender,\\n                _value,\\n                address(this),\\n                _extraData\\n            );\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * Destroy tokens\\n     *\\n     * Remove `_value` tokens from the system irreversibly\\n     *\\n     * @param _value the amount of money to burn\\n     */\\n    function burn(uint256 _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] >= _value); // Check if the sender has enough\\n        balanceOf[msg.sender] -= _value; // Subtract from the sender\\n        totalSupply -= _value; // Updates totalSupply\\n        emit Burn(msg.sender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Destroy tokens from other account\\n     *\\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\\n     *\\n     * @param _from the address of the sender\\n     * @param _value the amount of money to burn\\n     */\\n    function burnFrom(\\n        address _from,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        require(balanceOf[_from] >= _value); // Check if the targeted balance is enough\\n        require(_value <= allowance[_from][msg.sender]); // Check allowance\\n        balanceOf[_from] -= _value; // Subtract from the targeted balance\\n        allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\\n        totalSupply -= _value; // Update totalSupply\\n        emit Burn(_from, _value);\\n        return true;\\n    }\\n\\n    function getBalance(address userAddress) public view returns (uint256) {\\n        return balanceOf[userAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xcd282e9e35f3341e09a3585c9aae5e44e91e6ed00983bf1b4fc638da74638781\",\"license\":\"MIT\"},\"contracts/UserInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ncontract UserInfo {\\n    // \\u5b9a\\u4e49\\u7528\\u6237\\u7ed3\\u6784\\u4f53\\n    struct User {\\n        address userAddress; // \\u7528\\u6237\\u94b1\\u5305\\u5730\\u5740\\n        uint256 userId; // \\u7528\\u6237ID\\n        string userName; // \\u7528\\u6237\\u540d\\n        string pwd; // \\u5bc6\\u7801\\n        string role; // \\u7528\\u6237\\u89d2\\u8272\\n        uint256 assert; // \\u7528\\u6237\\u8d44\\u4ea7\\n        uint256 userState; //\\u7528\\u6237\\u72b6\\u6001 1\\u5b58\\u5728 0\\u5220\\u9664\\n    }\\n\\n    struct ReturnUser {\\n        address userAddress; // \\u7528\\u6237\\u94b1\\u5305\\u5730\\u5740\\n        string userId; // \\u7528\\u6237ID\\n        string userName; // \\u7528\\u6237\\u540d\\n        string pwd; // \\u5bc6\\u7801\\n        string role; // \\u7528\\u6237\\u89d2\\u8272\\n        string assert; // \\u7528\\u6237\\u8d44\\u4ea7\\n        string userState; //\\u7528\\u6237\\u72b6\\u6001\\n    }\\n    // \\u7528\\u6237ID\\u5230\\u7528\\u6237\\u7ed3\\u6784\\u4f53\\u7684\\u6620\\u5c04\\n    mapping(uint256 => User) public userMap;\\n    // event UserRegistered(string userId);\\n    event UserRegistered(uint256 userId);\\n\\n    // \\u5df2\\u6ce8\\u518c\\u7528\\n    uint256[] registeredUserId;\\n\\n    // \\u6dfb\\u52a0\\u7528\\u6237\\u51fd\\u6570\\n    function createUser(\\n        string memory _userName,\\n        string memory _pwd,\\n        address _userAddress //\\n    ) public {\\n        // \\u751f\\u6210\\u7528\\u6237ID\\uff08\\u4f7f\\u7528\\u7b80\\u5355\\u7684\\u4f2a\\u968f\\u673a\\u6570\\u751f\\u6210\\u51fd\\u6570\\uff09\\n        uint _userId = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, _userName))\\n        );\\n        // string memory _userId = uint256ToString(userId);\\n        // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n        User memory newUser = User(\\n            _userAddress,\\n            _userId,\\n            _userName,\\n            _pwd,\\n            // \\u666e\\u901a\\u7528\\u6237roleID\\u662f\\u201c0\\u201d\\n            \\\"0\\\",\\n            0,\\n            1\\n        );\\n        userMap[_userId] = newUser;\\n        registeredUserId.push(_userId);\\n        emit UserRegistered(_userId);\\n    }\\n\\n    // \\u7528\\u6237\\u767b\\u5f55\\u51fd\\u6570\\n    function loginUser(\\n        uint256 _userId,\\n        string memory _pwd\\n    ) public view returns (bool) {\\n        return\\n            keccak256(abi.encodePacked(userMap[_userId].pwd)) ==\\n            keccak256(abi.encodePacked(_pwd));\\n    }\\n\\n    // \\u67e5\\u8be2\\u7528\\u6237\\u4fe1\\u606f\\u51fd\\u6570\\n    function getUserInfo(\\n        uint256 _userId\\n    ) public view returns (ReturnUser memory) {\\n        User memory user = userMap[_userId];\\n        ReturnUser memory returnUser = ReturnUser(\\n            user.userAddress,\\n            uint256ToString(user.userId),\\n            user.userName,\\n            user.pwd,\\n            user.role,\\n            uint256ToString(user.assert),\\n            uint256ToString(user.userState)\\n        );\\n        return returnUser;\\n    }\\n\\n    // \\u66f4\\u6539\\u7528\\u6237\\u89d2\\u8272\\u51fd\\u6570\\n    function changeUserRole(uint256 _userId, string memory _role) public {\\n        userMap[_userId].role = _role;\\n    }\\n\\n    function updateUserInfo(\\n        address userAddress, // \\u7528\\u6237\\u94b1\\u5305\\u5730\\u5740\\n        uint256 userId, // \\u7528\\u6237ID\\n        string memory userName, // \\u7528\\u6237\\u540d\\n        string memory pwd, // \\u5bc6\\u7801\\n        string memory role,\\n        uint256 assertUpdate\\n    ) public {\\n        User memory newUser = User(\\n            userAddress,\\n            userId,\\n            userName,\\n            pwd,\\n            // \\u666e\\u901a\\u7528\\u6237roleID\\u662f\\u201c0\\u201d\\n            role,\\n            assertUpdate,\\n            userMap[userId].userState\\n        );\\n        userMap[userId] = newUser;\\n    }\\n\\n    function getRegisteredUserId() public view returns (uint256[] memory) {\\n        return registeredUserId;\\n    }\\n\\n    // \\u5c06 uint256 \\u7c7b\\u578b\\u8f6c\\u6362\\u4e3a\\u5b57\\u7b26\\u4e32\\n    function uint256ToString(\\n        uint256 value\\n    ) public pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + (value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc91265a6c356f336e5dc799eb449b26bd7def6632b92e42e411e2bcc6f14147f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001fa338038062001fa3833981810160405281019062000037919062000119565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001c8565b6000815190506200011381620001ae565b92915050565b600080600060608486031215620001355762000134620001a9565b5b6000620001458682870162000102565b9350506020620001588682870162000102565b92505060406200016b8682870162000102565b9150509250925092565b6000620001828262000189565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001b98162000175565b8114620001c557600080fd5b50565b611dcb80620001d86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636addb6631161008c578063a88922b311610066578063a88922b314610200578063ca1f1de014610230578063ce7e51e31461024e578063fed216cb1461027e576100cf565b80636addb663146101aa5780637d0b1026146101c857806398dcad61146101e4576100cf565b8063100e0382146100d45780632e2e29fa146100f25780633e0b04ed1461010e57806343a6f4ee1461013e5780634b9272db1461015c57806365d051a81461017a575b600080fd5b6100dc61029a565b6040516100e991906117dc565b60405180910390f35b61010c600480360381019061010791906114b8565b6102c0565b005b610128600480360381019061012391906114b8565b610350565b60405161013591906117c1565b60405180910390f35b6101466103b3565b6040516101539190611812565b60405180910390f35b6101646103d7565b604051610171919061177d565b60405180910390f35b610194600480360381019061018f91906114b8565b61049c565b6040516101a1919061179f565b60405180910390f35b6101b261097c565b6040516101bf91906117f7565b60405180910390f35b6101e260048036038101906101dd91906114b8565b6109a2565b005b6101fe60048036038101906101f99190611512565b610a32565b005b61021a600480360381019061021591906114b8565b610ab4565b604051610227919061182d565b60405180910390f35b610238610bc0565b604051610245919061177d565b60405180910390f35b610268600480360381019061026391906114b8565b610d48565b604051610275919061182d565b60405180910390f35b610298600480360381019061029391906114b8565b610ea9565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e2e29fa826040518263ffffffff1660e01b815260040161031b919061184f565b600060405180830381600087803b15801561033557600080fd5b505af1158015610349573d6000803e3d6000fd5b5050505050565b600080600090505b6003805490508110156103a857826003828154811061037a57610379611cac565b5b906000526020600020015414156103955760019150506103ae565b80806103a090611bd4565b915050610358565b50600090505b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600367ffffffffffffffff8111156103f6576103f5611cdb565b5b60405190808252806020026020018201604052801561042957816020015b60608152602001906001900390816104145790505b50905060005b600380549050811015610494576104636003828154811061045357610452611cac565b5b9060005260206000200154610d48565b82828151811061047657610475611cac565b5b6020026020010181905250808061048c90611bd4565b91505061042f565b508091505090565b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d712bcb26040518163ffffffff1660e01b815260040160006040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105449190611426565b90506000815167ffffffffffffffff81111561056357610562611cdb565b5b6040519080825280602002602001820160405280156105915781602001602082028036833780820191505090505b50905060005b825181101561074857600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f8b2cb4f60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d379dadf86858151811061062d5761062c611cac565b5b60200260200101516040518263ffffffff1660e01b8152600401610651919061184f565b60006040518083038186803b15801561066957600080fd5b505afa15801561067d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106a6919061146f565b600001516040518263ffffffff1660e01b81526004016106c69190611762565b60206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071691906114e5565b82828151811061072957610728611cac565b5b602002602001018181525050808061074090611bd4565b915050610597565b5060008467ffffffffffffffff81111561076557610764611cdb565b5b6040519080825280602002602001820160405280156107935781602001602082028036833780820191505090505b50905060008567ffffffffffffffff8111156107b2576107b1611cdb565b5b6040519080825280602002602001820160405280156107e05781602001602082028036833780820191505090505b50905060005b86811080156107f55750845181105b1561088c5784818151811061080d5761080c611cac565b5b602002602001015183828151811061082857610827611cac565b5b60200260200101818152505083818151811061084757610846611cac565b5b602002602001015182828151811061086257610861611cac565b5b602002602001018181525050610879828483610f39565b808061088490611bd4565b9150506107e6565b5060008690505b845181101561096f57816000815181106108b0576108af611cac565b5b60200260200101518482815181106108cb576108ca611cac565b5b6020026020010151111561095c578381815181106108ec576108eb611cac565b5b60200260200101518260008151811061090857610907611cac565b5b60200260200101818152505084818151811061092757610926611cac565b5b60200260200101518360008151811061094357610942611cac565b5b60200260200101818152505061095b82846000610f39565b5b808061096790611bd4565b915050610893565b5081945050505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d0b1026826040518263ffffffff1660e01b81526004016109fd919061184f565b600060405180830381600087803b158015610a1757600080fd5b505af1158015610a2b573d6000803e3d6000fd5b5050505050565b6000604051806060016040528085815260200184815260200183815250905060046000848152602001908152602001600020819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020155505050505050565b6060600080600060046000868152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610b3e5783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190610aee565b50505050905060005b8151811015610bac576001828281518110610b6557610b64611cac565b5b6020026020010151604001511415610b8a578380610b8290611bd4565b945050610b99565b8280610b9590611bd4565b9350505b8080610ba490611bd4565b915050610b47565b50610bb683610d48565b9350505050919050565b60606000610bce600361049c565b90506000600367ffffffffffffffff811115610bed57610bec611cdb565b5b604051908082528060200260200182016040528015610c2057816020015b6060815260200190600190039081610c0b5790505b50905060005b8251811015610d285760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306bda852848381518110610c7e57610c7d611cac565b5b60200260200101516040518263ffffffff1660e01b8152600401610ca2919061186a565b600060405180830381600087803b158015610cbc57600080fd5b505af1158015610cd0573d6000803e3d6000fd5b50505050610cf7838281518110610cea57610ce9611cac565b5b6020026020010151610d48565b828281518110610d0a57610d09611cac565b5b60200260200101819052508080610d2090611bd4565b915050610c26565b508160039080519060200190610d3f929190611113565b50809250505090565b60606000821415610d90576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ea4565b600082905060005b60008214610dc2578080610dab90611bd4565b915050600a82610dbb9190611a0f565b9150610d98565b60008167ffffffffffffffff811115610dde57610ddd611cdb565b5b6040519080825280601f01601f191660200182016040528015610e105781602001600182028036833780820191505090505b5090505b60008514610e9d57600182610e299190611a9a565b9150600a85610e389190611c1d565b6030610e4491906119b9565b60f81b818381518110610e5a57610e59611cac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610e969190611a0f565b9450610e14565b8093505050505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fed216cb826040518263ffffffff1660e01b8152600401610f04919061184f565b600060405180830381600087803b158015610f1e57600080fd5b505af1158015610f32573d6000803e3d6000fd5b5050505050565b600081905060006001836002610f4f9190611a40565b610f5991906119b9565b905060006002846002610f6c9190611a40565b610f7691906119b9565b9050855182108015610fbb5750858381518110610f9657610f95611cac565b5b6020026020010151868381518110610fb157610fb0611cac565b5b6020026020010151115b15610fc4578192505b8551811080156110075750858381518110610fe257610fe1611cac565b5b6020026020010151868281518110610ffd57610ffc611cac565b5b6020026020010151115b15611010578092505b83831461110b5785838151811061102a57611029611cac565b5b602002602001015186858151811061104557611044611cac565b5b60200260200101518786815181106110605761105f611cac565b5b6020026020010188868151811061107a57611079611cac565b5b602002602001018281525082815250505084838151811061109e5761109d611cac565b5b60200260200101518585815181106110b9576110b8611cac565b5b60200260200101518686815181106110d4576110d3611cac565b5b602002602001018786815181106110ee576110ed611cac565b5b602002602001018281525082815250505061110a868685610f39565b5b505050505050565b82805482825590600052602060002090810192821561114f579160200282015b8281111561114e578251825591602001919060010190611133565b5b50905061115c9190611160565b5090565b5b80821115611179576000816000905550600101611161565b5090565b600061119061118b846118bd565b611898565b905080838252602082019050828560208602820111156111b3576111b2611d19565b5b60005b858110156111e357816111c98882611411565b8452602084019350602083019250506001810190506111b6565b5050509392505050565b60006112006111fb846118e9565b611898565b90508281526020810184848401111561121c5761121b611d1e565b5b611227848285611b70565b509392505050565b60008151905061123e81611d67565b92915050565b600082601f83011261125957611258611d0a565b5b815161126984826020860161117d565b91505092915050565b600082601f83011261128757611286611d0a565b5b81516112978482602086016111ed565b91505092915050565b600060e082840312156112b6576112b5611d0f565b5b6112c060e0611898565b905060006112d08482850161122f565b600083015250602082015167ffffffffffffffff8111156112f4576112f3611d14565b5b61130084828501611272565b602083015250604082015167ffffffffffffffff81111561132457611323611d14565b5b61133084828501611272565b604083015250606082015167ffffffffffffffff81111561135457611353611d14565b5b61136084828501611272565b606083015250608082015167ffffffffffffffff81111561138457611383611d14565b5b61139084828501611272565b60808301525060a082015167ffffffffffffffff8111156113b4576113b3611d14565b5b6113c084828501611272565b60a08301525060c082015167ffffffffffffffff8111156113e4576113e3611d14565b5b6113f084828501611272565b60c08301525092915050565b60008135905061140b81611d7e565b92915050565b60008151905061142081611d7e565b92915050565b60006020828403121561143c5761143b611d28565b5b600082015167ffffffffffffffff81111561145a57611459611d23565b5b61146684828501611244565b91505092915050565b60006020828403121561148557611484611d28565b5b600082015167ffffffffffffffff8111156114a3576114a2611d23565b5b6114af848285016112a0565b91505092915050565b6000602082840312156114ce576114cd611d28565b5b60006114dc848285016113fc565b91505092915050565b6000602082840312156114fb576114fa611d28565b5b600061150984828501611411565b91505092915050565b60008060006060848603121561152b5761152a611d28565b5b6000611539868287016113fc565b935050602061154a868287016113fc565b925050604061155b868287016113fc565b9150509250925092565b600061157183836116af565b905092915050565b60006115858383611744565b60208301905092915050565b61159a81611ace565b82525050565b60006115ab8261193a565b6115b58185611975565b9350836020820285016115c78561191a565b8060005b8581101561160357848403895281516115e48582611565565b94506115ef8361195b565b925060208a019950506001810190506115cb565b50829750879550505050505092915050565b600061162082611945565b61162a8185611986565b93506116358361192a565b8060005b8381101561166657815161164d8882611579565b975061165883611968565b925050600181019050611639565b5085935050505092915050565b61167c81611ae0565b82525050565b61168b81611b16565b82525050565b61169a81611b28565b82525050565b6116a981611b3a565b82525050565b60006116ba82611950565b6116c48185611997565b93506116d4818560208601611b70565b6116dd81611d2d565b840191505092915050565b60006116f382611950565b6116fd81856119a8565b935061170d818560208601611b70565b61171681611d2d565b840191505092915050565b600061172e6001836119a8565b915061173982611d3e565b602082019050919050565b61174d81611b0c565b82525050565b61175c81611b0c565b82525050565b60006020820190506117776000830184611591565b92915050565b6000602082019050818103600083015261179781846115a0565b905092915050565b600060208201905081810360008301526117b98184611615565b905092915050565b60006020820190506117d66000830184611673565b92915050565b60006020820190506117f16000830184611682565b92915050565b600060208201905061180c6000830184611691565b92915050565b600060208201905061182760008301846116a0565b92915050565b6000602082019050818103600083015261184781846116e8565b905092915050565b60006020820190506118646000830184611753565b92915050565b600060408201905061187f6000830184611753565b818103602083015261189081611721565b905092915050565b60006118a26118b3565b90506118ae8282611ba3565b919050565b6000604051905090565b600067ffffffffffffffff8211156118d8576118d7611cdb565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561190457611903611cdb565b5b61190d82611d2d565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006119c482611b0c565b91506119cf83611b0c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a0457611a03611c4e565b5b828201905092915050565b6000611a1a82611b0c565b9150611a2583611b0c565b925082611a3557611a34611c7d565b5b828204905092915050565b6000611a4b82611b0c565b9150611a5683611b0c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a8f57611a8e611c4e565b5b828202905092915050565b6000611aa582611b0c565b9150611ab083611b0c565b925082821015611ac357611ac2611c4e565b5b828203905092915050565b6000611ad982611aec565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611b2182611b4c565b9050919050565b6000611b3382611b4c565b9050919050565b6000611b4582611b4c565b9050919050565b6000611b5782611b5e565b9050919050565b6000611b6982611aec565b9050919050565b60005b83811015611b8e578082015181840152602081019050611b73565b83811115611b9d576000848401525b50505050565b611bac82611d2d565b810181811067ffffffffffffffff82111715611bcb57611bca611cdb565b5b80604052505050565b6000611bdf82611b0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c1257611c11611c4e565b5b600182019050919050565b6000611c2882611b0c565b9150611c3383611b0c565b925082611c4357611c42611c7d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f3100000000000000000000000000000000000000000000000000000000000000600082015250565b611d7081611ace565b8114611d7b57600080fd5b50565b611d8781611b0c565b8114611d9257600080fd5b5056fea2646970667358221220af2a07b48fff3898bc98601360188592c71cd4b91f5341271c07a3373e54980464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636addb6631161008c578063a88922b311610066578063a88922b314610200578063ca1f1de014610230578063ce7e51e31461024e578063fed216cb1461027e576100cf565b80636addb663146101aa5780637d0b1026146101c857806398dcad61146101e4576100cf565b8063100e0382146100d45780632e2e29fa146100f25780633e0b04ed1461010e57806343a6f4ee1461013e5780634b9272db1461015c57806365d051a81461017a575b600080fd5b6100dc61029a565b6040516100e991906117dc565b60405180910390f35b61010c600480360381019061010791906114b8565b6102c0565b005b610128600480360381019061012391906114b8565b610350565b60405161013591906117c1565b60405180910390f35b6101466103b3565b6040516101539190611812565b60405180910390f35b6101646103d7565b604051610171919061177d565b60405180910390f35b610194600480360381019061018f91906114b8565b61049c565b6040516101a1919061179f565b60405180910390f35b6101b261097c565b6040516101bf91906117f7565b60405180910390f35b6101e260048036038101906101dd91906114b8565b6109a2565b005b6101fe60048036038101906101f99190611512565b610a32565b005b61021a600480360381019061021591906114b8565b610ab4565b604051610227919061182d565b60405180910390f35b610238610bc0565b604051610245919061177d565b60405180910390f35b610268600480360381019061026391906114b8565b610d48565b604051610275919061182d565b60405180910390f35b610298600480360381019061029391906114b8565b610ea9565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e2e29fa826040518263ffffffff1660e01b815260040161031b919061184f565b600060405180830381600087803b15801561033557600080fd5b505af1158015610349573d6000803e3d6000fd5b5050505050565b600080600090505b6003805490508110156103a857826003828154811061037a57610379611cac565b5b906000526020600020015414156103955760019150506103ae565b80806103a090611bd4565b915050610358565b50600090505b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600367ffffffffffffffff8111156103f6576103f5611cdb565b5b60405190808252806020026020018201604052801561042957816020015b60608152602001906001900390816104145790505b50905060005b600380549050811015610494576104636003828154811061045357610452611cac565b5b9060005260206000200154610d48565b82828151811061047657610475611cac565b5b6020026020010181905250808061048c90611bd4565b91505061042f565b508091505090565b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d712bcb26040518163ffffffff1660e01b815260040160006040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105449190611426565b90506000815167ffffffffffffffff81111561056357610562611cdb565b5b6040519080825280602002602001820160405280156105915781602001602082028036833780820191505090505b50905060005b825181101561074857600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f8b2cb4f60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d379dadf86858151811061062d5761062c611cac565b5b60200260200101516040518263ffffffff1660e01b8152600401610651919061184f565b60006040518083038186803b15801561066957600080fd5b505afa15801561067d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106a6919061146f565b600001516040518263ffffffff1660e01b81526004016106c69190611762565b60206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071691906114e5565b82828151811061072957610728611cac565b5b602002602001018181525050808061074090611bd4565b915050610597565b5060008467ffffffffffffffff81111561076557610764611cdb565b5b6040519080825280602002602001820160405280156107935781602001602082028036833780820191505090505b50905060008567ffffffffffffffff8111156107b2576107b1611cdb565b5b6040519080825280602002602001820160405280156107e05781602001602082028036833780820191505090505b50905060005b86811080156107f55750845181105b1561088c5784818151811061080d5761080c611cac565b5b602002602001015183828151811061082857610827611cac565b5b60200260200101818152505083818151811061084757610846611cac565b5b602002602001015182828151811061086257610861611cac565b5b602002602001018181525050610879828483610f39565b808061088490611bd4565b9150506107e6565b5060008690505b845181101561096f57816000815181106108b0576108af611cac565b5b60200260200101518482815181106108cb576108ca611cac565b5b6020026020010151111561095c578381815181106108ec576108eb611cac565b5b60200260200101518260008151811061090857610907611cac565b5b60200260200101818152505084818151811061092757610926611cac565b5b60200260200101518360008151811061094357610942611cac565b5b60200260200101818152505061095b82846000610f39565b5b808061096790611bd4565b915050610893565b5081945050505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d0b1026826040518263ffffffff1660e01b81526004016109fd919061184f565b600060405180830381600087803b158015610a1757600080fd5b505af1158015610a2b573d6000803e3d6000fd5b5050505050565b6000604051806060016040528085815260200184815260200183815250905060046000848152602001908152602001600020819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020155505050505050565b6060600080600060046000868152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610b3e5783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190610aee565b50505050905060005b8151811015610bac576001828281518110610b6557610b64611cac565b5b6020026020010151604001511415610b8a578380610b8290611bd4565b945050610b99565b8280610b9590611bd4565b9350505b8080610ba490611bd4565b915050610b47565b50610bb683610d48565b9350505050919050565b60606000610bce600361049c565b90506000600367ffffffffffffffff811115610bed57610bec611cdb565b5b604051908082528060200260200182016040528015610c2057816020015b6060815260200190600190039081610c0b5790505b50905060005b8251811015610d285760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306bda852848381518110610c7e57610c7d611cac565b5b60200260200101516040518263ffffffff1660e01b8152600401610ca2919061186a565b600060405180830381600087803b158015610cbc57600080fd5b505af1158015610cd0573d6000803e3d6000fd5b50505050610cf7838281518110610cea57610ce9611cac565b5b6020026020010151610d48565b828281518110610d0a57610d09611cac565b5b60200260200101819052508080610d2090611bd4565b915050610c26565b508160039080519060200190610d3f929190611113565b50809250505090565b60606000821415610d90576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ea4565b600082905060005b60008214610dc2578080610dab90611bd4565b915050600a82610dbb9190611a0f565b9150610d98565b60008167ffffffffffffffff811115610dde57610ddd611cdb565b5b6040519080825280601f01601f191660200182016040528015610e105781602001600182028036833780820191505090505b5090505b60008514610e9d57600182610e299190611a9a565b9150600a85610e389190611c1d565b6030610e4491906119b9565b60f81b818381518110610e5a57610e59611cac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610e969190611a0f565b9450610e14565b8093505050505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fed216cb826040518263ffffffff1660e01b8152600401610f04919061184f565b600060405180830381600087803b158015610f1e57600080fd5b505af1158015610f32573d6000803e3d6000fd5b5050505050565b600081905060006001836002610f4f9190611a40565b610f5991906119b9565b905060006002846002610f6c9190611a40565b610f7691906119b9565b9050855182108015610fbb5750858381518110610f9657610f95611cac565b5b6020026020010151868381518110610fb157610fb0611cac565b5b6020026020010151115b15610fc4578192505b8551811080156110075750858381518110610fe257610fe1611cac565b5b6020026020010151868281518110610ffd57610ffc611cac565b5b6020026020010151115b15611010578092505b83831461110b5785838151811061102a57611029611cac565b5b602002602001015186858151811061104557611044611cac565b5b60200260200101518786815181106110605761105f611cac565b5b6020026020010188868151811061107a57611079611cac565b5b602002602001018281525082815250505084838151811061109e5761109d611cac565b5b60200260200101518585815181106110b9576110b8611cac565b5b60200260200101518686815181106110d4576110d3611cac565b5b602002602001018786815181106110ee576110ed611cac565b5b602002602001018281525082815250505061110a868685610f39565b5b505050505050565b82805482825590600052602060002090810192821561114f579160200282015b8281111561114e578251825591602001919060010190611133565b5b50905061115c9190611160565b5090565b5b80821115611179576000816000905550600101611161565b5090565b600061119061118b846118bd565b611898565b905080838252602082019050828560208602820111156111b3576111b2611d19565b5b60005b858110156111e357816111c98882611411565b8452602084019350602083019250506001810190506111b6565b5050509392505050565b60006112006111fb846118e9565b611898565b90508281526020810184848401111561121c5761121b611d1e565b5b611227848285611b70565b509392505050565b60008151905061123e81611d67565b92915050565b600082601f83011261125957611258611d0a565b5b815161126984826020860161117d565b91505092915050565b600082601f83011261128757611286611d0a565b5b81516112978482602086016111ed565b91505092915050565b600060e082840312156112b6576112b5611d0f565b5b6112c060e0611898565b905060006112d08482850161122f565b600083015250602082015167ffffffffffffffff8111156112f4576112f3611d14565b5b61130084828501611272565b602083015250604082015167ffffffffffffffff81111561132457611323611d14565b5b61133084828501611272565b604083015250606082015167ffffffffffffffff81111561135457611353611d14565b5b61136084828501611272565b606083015250608082015167ffffffffffffffff81111561138457611383611d14565b5b61139084828501611272565b60808301525060a082015167ffffffffffffffff8111156113b4576113b3611d14565b5b6113c084828501611272565b60a08301525060c082015167ffffffffffffffff8111156113e4576113e3611d14565b5b6113f084828501611272565b60c08301525092915050565b60008135905061140b81611d7e565b92915050565b60008151905061142081611d7e565b92915050565b60006020828403121561143c5761143b611d28565b5b600082015167ffffffffffffffff81111561145a57611459611d23565b5b61146684828501611244565b91505092915050565b60006020828403121561148557611484611d28565b5b600082015167ffffffffffffffff8111156114a3576114a2611d23565b5b6114af848285016112a0565b91505092915050565b6000602082840312156114ce576114cd611d28565b5b60006114dc848285016113fc565b91505092915050565b6000602082840312156114fb576114fa611d28565b5b600061150984828501611411565b91505092915050565b60008060006060848603121561152b5761152a611d28565b5b6000611539868287016113fc565b935050602061154a868287016113fc565b925050604061155b868287016113fc565b9150509250925092565b600061157183836116af565b905092915050565b60006115858383611744565b60208301905092915050565b61159a81611ace565b82525050565b60006115ab8261193a565b6115b58185611975565b9350836020820285016115c78561191a565b8060005b8581101561160357848403895281516115e48582611565565b94506115ef8361195b565b925060208a019950506001810190506115cb565b50829750879550505050505092915050565b600061162082611945565b61162a8185611986565b93506116358361192a565b8060005b8381101561166657815161164d8882611579565b975061165883611968565b925050600181019050611639565b5085935050505092915050565b61167c81611ae0565b82525050565b61168b81611b16565b82525050565b61169a81611b28565b82525050565b6116a981611b3a565b82525050565b60006116ba82611950565b6116c48185611997565b93506116d4818560208601611b70565b6116dd81611d2d565b840191505092915050565b60006116f382611950565b6116fd81856119a8565b935061170d818560208601611b70565b61171681611d2d565b840191505092915050565b600061172e6001836119a8565b915061173982611d3e565b602082019050919050565b61174d81611b0c565b82525050565b61175c81611b0c565b82525050565b60006020820190506117776000830184611591565b92915050565b6000602082019050818103600083015261179781846115a0565b905092915050565b600060208201905081810360008301526117b98184611615565b905092915050565b60006020820190506117d66000830184611673565b92915050565b60006020820190506117f16000830184611682565b92915050565b600060208201905061180c6000830184611691565b92915050565b600060208201905061182760008301846116a0565b92915050565b6000602082019050818103600083015261184781846116e8565b905092915050565b60006020820190506118646000830184611753565b92915050565b600060408201905061187f6000830184611753565b818103602083015261189081611721565b905092915050565b60006118a26118b3565b90506118ae8282611ba3565b919050565b6000604051905090565b600067ffffffffffffffff8211156118d8576118d7611cdb565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561190457611903611cdb565b5b61190d82611d2d565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006119c482611b0c565b91506119cf83611b0c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a0457611a03611c4e565b5b828201905092915050565b6000611a1a82611b0c565b9150611a2583611b0c565b925082611a3557611a34611c7d565b5b828204905092915050565b6000611a4b82611b0c565b9150611a5683611b0c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a8f57611a8e611c4e565b5b828202905092915050565b6000611aa582611b0c565b9150611ab083611b0c565b925082821015611ac357611ac2611c4e565b5b828203905092915050565b6000611ad982611aec565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611b2182611b4c565b9050919050565b6000611b3382611b4c565b9050919050565b6000611b4582611b4c565b9050919050565b6000611b5782611b5e565b9050919050565b6000611b6982611aec565b9050919050565b60005b83811015611b8e578082015181840152602081019050611b73565b83811115611b9d576000848401525b50505050565b611bac82611d2d565b810181811067ffffffffffffffff82111715611bcb57611bca611cdb565b5b80604052505050565b6000611bdf82611b0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c1257611c11611c4e565b5b600182019050919050565b6000611c2882611b0c565b9150611c3383611b0c565b925082611c4357611c42611c7d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f3100000000000000000000000000000000000000000000000000000000000000600082015250565b611d7081611ace565b8114611d7b57600080fd5b50565b611d8781611b0c565b8114611d9257600080fd5b5056fea2646970667358221220af2a07b48fff3898bc98601360188592c71cd4b91f5341271c07a3373e54980464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1014,
        "contract": "contracts/ManageInfo.sol:ManageInfo",
        "label": "userInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(UserInfo)2556"
      },
      {
        "astId": 1017,
        "contract": "contracts/ManageInfo.sol:ManageInfo",
        "label": "contentInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ContentInfo)1006"
      },
      {
        "astId": 1020,
        "contract": "contracts/ManageInfo.sol:ManageInfo",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(TokenERC20)2249"
      },
      {
        "astId": 1030,
        "contract": "contracts/ManageInfo.sol:ManageInfo",
        "label": "commitMember",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1036,
        "contract": "contracts/ManageInfo.sol:ManageInfo",
        "label": "complainVotesMap",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_struct(Vote)1027_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_array(t_struct(Vote)1027_storage)dyn_storage": {
        "base": "t_struct(Vote)1027_storage",
        "encoding": "dynamic_array",
        "label": "struct ManageInfo.Vote[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ContentInfo)1006": {
        "encoding": "inplace",
        "label": "contract ContentInfo",
        "numberOfBytes": "20"
      },
      "t_contract(TokenERC20)2249": {
        "encoding": "inplace",
        "label": "contract TokenERC20",
        "numberOfBytes": "20"
      },
      "t_contract(UserInfo)2556": {
        "encoding": "inplace",
        "label": "contract UserInfo",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_struct(Vote)1027_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ManageInfo.Vote[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Vote)1027_storage)dyn_storage"
      },
      "t_struct(Vote)1027_storage": {
        "encoding": "inplace",
        "label": "struct ManageInfo.Vote",
        "members": [
          {
            "astId": 1022,
            "contract": "contracts/ManageInfo.sol:ManageInfo",
            "label": "voter",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1024,
            "contract": "contracts/ManageInfo.sol:ManageInfo",
            "label": "complaintId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1026,
            "contract": "contracts/ManageInfo.sol:ManageInfo",
            "label": "inSupport",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}