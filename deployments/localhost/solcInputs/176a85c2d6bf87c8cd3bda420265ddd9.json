{
  "language": "Solidity",
  "sources": {
    "contracts/ContentInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract ContentInfo {\n    struct Content {\n        uint256 contentId; // 文章id\n        uint256 userId; // 用户id\n        string title; // 标题\n        string content; // 内容\n        uint256 updateTime; // 更新时间\n        uint256 praiseCount; // 点赞数\n        uint256 contentState; //文章状态  1存在 0删除\n    }\n\n    struct Comment {\n        uint256 contentId; // 文章ID\n        uint256 userId; // 用户ID\n        uint256 commentId; //评论ID\n        string content; // 评论内容\n        uint256 updateTime; // 评论发表时间\n        uint256 praiseCount; // 赞的数\n        uint256 commentState; // 评论状态  1存在 0删除\n    }\n\n    struct Complain {\n        uint256 complaintId; // 投诉id\n        uint256 contentId; // 文章ID\n        uint256 userId; // 用户ID\n        uint256 commentId; // 评论ID\n        string content; // 评论内容\n        uint256 updateTime; // 评论发表时间\n        uint256 complainState; // 评论状态  1存在 0删除\n    }\n\n    struct ReturnContent {\n        string contentId; // 文章id\n        string userId; // 用户id\n        string title; // 标题\n        string content; // 内容\n        string updateTime; // 更新时间\n        string praiseCount; // 点赞数\n        string contentState; //文章状态\n    }\n\n    mapping(uint256 => Content) public contentMap;\n    uint256[] public contentIds;\n    mapping(uint256 => Comment) public commentMap;\n    mapping(uint256 => Complain) public complainMap;\n\n    // event UserRegistered(string userId);\n    event ContentCreated(uint256 contentId);\n\n    function createContent(\n        uint256 _userId,\n        string memory _title,\n        string memory _content\n    ) public {\n        uint256 _contentId = uint256(\n            keccak256(abi.encodePacked(block.timestamp, _userId, _title))\n        );\n        contentMap[_contentId] = Content(\n            _contentId,\n            _userId,\n            _title,\n            _content,\n            block.timestamp,\n            0,\n            1\n        );\n        contentIds.push(_contentId);\n        emit ContentCreated(_contentId);\n    }\n\n    function getContent(\n        uint256 _contentId\n    ) public view returns (ReturnContent memory) {\n        Content memory content = contentMap[_contentId];\n        ReturnContent memory returnContent = ReturnContent(\n            uint256ToString(content.contentId),\n            uint256ToString(content.userId),\n            content.title,\n            content.content,\n            uint256ToString(content.updateTime),\n            uint256ToString(content.praiseCount),\n            uint256ToString(content.contentState)\n        );\n        return returnContent;\n    }\n\n    function updateContent(\n        uint256 _contentId,\n        string memory _title,\n        string memory _content\n    ) public {\n        Content memory contentOld = contentMap[_contentId];\n        contentOld.title = _title;\n        contentOld.content = _content;\n        contentOld.updateTime = block.timestamp;\n        contentMap[_contentId] = contentOld;\n    }\n\n    function deleteContent(uint256 _contentId) public {\n        Content memory contentDelete = contentMap[_contentId];\n        contentDelete.contentState = 0;\n        contentMap[_contentId] = contentDelete;\n    }\n\n    function praiseContent(uint256 _contentId) public {\n        Content memory content = contentMap[_contentId];\n        content.praiseCount++;\n    }\n\n    function getAllContent() public view returns (ReturnContent[] memory) {\n        uint256 count = contentIds.length;\n        uint256 existCount = 0;\n        for (uint256 i = 0; i < count; i++) {\n            if (contentMap[contentIds[i]].contentState == 1) {\n                existCount++;\n            }\n        }\n        ReturnContent[] memory allContent = new ReturnContent[](existCount);\n        uint256 index = 0;\n        for (uint256 i = 0; i < count; i++) {\n            if (contentMap[contentIds[i]].contentState == 1) {\n                allContent[index] = getContent(i);\n                index++;\n            }\n        }\n        return allContent;\n    }\n\n    // 将 uint256 类型转换为字符串\n    function uint256ToString(\n        uint256 value\n    ) public pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + (value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}