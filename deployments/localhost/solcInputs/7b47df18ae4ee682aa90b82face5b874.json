{
  "language": "Solidity",
  "sources": {
    "contracts/ContentInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract ContentInfo {\n    struct Content {\n        uint256 contentId; // 文章id\n        uint256 userId; // 用户id\n        string title; // 标题\n        string content; // 内容\n        uint256 updateTime; // 更新时间\n        uint256 praiseCount; // 点赞数\n        uint256 contentState; //文章状态  1存在 0删除\n    }\n\n    struct Comment {\n        uint256 contentId; // 文章ID\n        uint256 userId; // 用户ID\n        uint256 commentId; //评论ID\n        string comment; // 评论内容\n        uint256 updateTime; // 评论发表时间\n        uint256 praiseCount; // 赞的数\n        uint256 commentState; // 评论状态  1存在 0删除\n    }\n\n    struct Complain {\n        uint256 complaintId; // 投诉id\n        uint256 contentId; // 文章ID\n        uint256 userId; // 用户ID\n        uint256 commentId; // 评论ID\n        string content; // 投诉内容\n        uint256 updateTime; // 投诉发表时间\n        uint256 complainState; // 评论状态  1存在 0删除\n    }\n\n    struct ReturnContent {\n        string contentId; // 文章id\n        string userId; // 用户id\n        string title; // 标题\n        string content; // 内容\n        string updateTime; // 更新时间\n        string praiseCount; // 点赞数\n        string contentState; //文章状态\n    }\n\n    struct ReturnComment {\n        string contentId; // 文章id\n        string userId; // 用户id\n        string commentId; // 评论id\n        string comment; // 评论内容\n        string updateTime; // 更新时间\n        string praiseCount; // 点赞数\n        string commentState; // 评论状态\n    }\n\n    struct ReturnComplain {\n        string complaintId; // 投诉id\n        string contentId; // 文章ID\n        string userId; // 用户ID\n        string commentId; // 评论ID\n        string content; // 投诉内容\n        string updateTime; // 投诉发表时间\n        string complainState; // 投诉状态\n    }\n\n    mapping(uint256 => Content) public contentMap;\n    uint256[] public contentIds;\n    uint256[] public complainIds;\n    mapping(uint256 => Comment) public commentMap;\n    mapping(uint256 => Complain) public complainMap;\n    mapping(uint256 => uint256[]) public contentComments; // 映射 contentId 到评论数组\n\n    // event UserRegistered(string userId);\n    event ContentCreated(uint256 contentId);\n    event PraiseDone(uint256 praiseCount); //这是对帖子进行评论的内容\n    event CommentCreated(uint256 commentId);\n    event PraiseCommentDone(uint256 praiseCount);\n    event ComplaintCreated(uint256 complaintId);\n\n    function createContent(\n        uint256 _userId,\n        string memory _title,\n        string memory _content\n    ) public {\n        uint256 _contentId = uint256(\n            keccak256(abi.encodePacked(block.timestamp, _userId, _title))\n        );\n        contentMap[_contentId] = Content(\n            _contentId,\n            _userId,\n            _title,\n            _content,\n            block.timestamp,\n            0,\n            1\n        );\n        contentIds.push(_contentId);\n        emit ContentCreated(_contentId);\n    }\n\n    function getContent(\n        uint256 _contentId\n    ) public view returns (ReturnContent memory) {\n        Content memory content = contentMap[_contentId];\n        ReturnContent memory returnContent = ReturnContent(\n            uint256ToString(content.contentId),\n            uint256ToString(content.userId),\n            content.title,\n            content.content,\n            uint256ToString(content.updateTime),\n            uint256ToString(content.praiseCount),\n            uint256ToString(content.contentState)\n        );\n        return returnContent;\n    }\n\n    function updateContent(\n        uint256 _contentId,\n        string memory _title,\n        string memory _content\n    ) public {\n        Content memory contentOld = contentMap[_contentId];\n        contentOld.title = _title;\n        contentOld.content = _content;\n        contentOld.updateTime = block.timestamp;\n        contentMap[_contentId] = contentOld;\n    }\n\n    function deleteContent(uint256 _contentId) public {\n        Content memory contentDelete = contentMap[_contentId];\n        contentDelete.contentState = 0;\n        contentMap[_contentId] = contentDelete;\n    }\n\n    function praiseContent(uint256 _contentId) public {\n        contentMap[_contentId].praiseCount++;\n        emit PraiseDone(contentMap[_contentId].praiseCount);\n    }\n\n    function getAllContent() public view returns (ReturnContent[] memory) {\n        uint256 count = contentIds.length;\n        uint256 existCount = 0;\n        for (uint256 i = 0; i < count; i++) {\n            if (contentMap[contentIds[i]].contentState == 1) {\n                existCount++;\n            }\n        }\n        ReturnContent[] memory allContent = new ReturnContent[](existCount);\n        uint256 index = 0;\n        for (uint256 i = 0; i < count; i++) {\n            if (contentMap[contentIds[i]].contentState == 1) {\n                allContent[index] = getContent(contentIds[i]);\n                index++;\n            }\n        }\n        return allContent;\n    }\n\n    //创建评论\n    function createComment(\n        uint256 _contentId,\n        uint256 _userId,\n        string memory _comment\n    ) public {\n        //记得最后开启\n        // require(\n        //     contentMap[_contentId].contentState == 1,\n        //     \"Content does not exist\"\n        // );\n\n        // Generate comment ID\n        uint256 _commentId = uint256(\n            keccak256(abi.encodePacked(block.timestamp, _contentId, _userId))\n        );\n\n        // Create the comment struct\n        Comment memory comment = Comment(\n            _contentId,\n            _userId,\n            _commentId,\n            _comment,\n            block.timestamp,\n            0, // Initial praise count is 0\n            1 // Comment state is active\n        );\n        commentMap[_commentId] = comment;\n        // // Update the content's comment count\n        contentComments[_contentId].push(_commentId);\n        // Trigger an event\n        emit CommentCreated(_commentId);\n    }\n\n    // 更新评论\n    function updateComment(uint256 _commentId, string memory _comment) public {\n        // 确保评论存在\n        // require(\n        //     commentMap[_commentId].commentState == 1,\n        //     \"Comment does not exist\"\n        // );\n\n        // 更新评论内容\n        Comment memory comment = commentMap[_commentId];\n        comment.comment = _comment;\n        comment.updateTime = block.timestamp;\n        commentMap[_commentId] = comment;\n    }\n\n    // 获取评论\n    function getComment(\n        uint256 _commentId\n    ) public view returns (ReturnComment memory) {\n        // 确保评论存在\n        // require(\n        //     commentMap[_commentId].commentState == 1,\n        //     \"Comment does not exist\"\n        // );\n        Comment memory comment = commentMap[_commentId];\n        ReturnComment memory returnComment = ReturnComment(\n            uint256ToString(comment.contentId),\n            uint256ToString(comment.userId),\n            uint256ToString(comment.commentId),\n            comment.comment,\n            uint256ToString(comment.updateTime),\n            uint256ToString(comment.praiseCount),\n            uint256ToString(comment.commentState)\n        );\n        // 返回评论内容\n        return returnComment;\n    }\n\n    // 删除评论\n    function deleteComment(uint256 _commentId) public {\n        // 确保评论存在\n        // require(\n        //     commentMap[_commentId].commentState == 1,\n        //     \"Comment does not exist\"\n        // );\n\n        // 删除评论\n        Comment memory commentDelete = commentMap[_commentId];\n        commentDelete.commentState = 0;\n        commentMap[_commentId] = commentDelete;\n    }\n\n    function getCommentsByContentId(\n        uint256 _contentId\n    ) public view returns (ReturnComment[] memory) {\n        //contentId对应的评论的数组\n        uint256[] memory commmentArray = contentComments[_contentId];\n        uint256 count = commmentArray.length;\n        uint256 existCount = 0;\n        // 遍历所有评论，统计符合条件的评论数量\n        for (uint256 i = 0; i < count; i++) {\n            if (commentMap[commmentArray[i]].commentState == 1) {\n                existCount++;\n            }\n        }\n        // 创建一个数组用于存储符合条件的评论\n        ReturnComment[] memory comments = new ReturnComment[](existCount);\n        uint256 index = 0;\n        // 遍历所有评论，将符合条件的评论存入数组\n        for (uint256 i = 0; i < count; i++) {\n            if (commentMap[commmentArray[i]].commentState == 1) {\n                comments[index] = getComment(commmentArray[i]);\n                index++;\n            }\n        }\n        // 返回所有评论\n        return comments;\n    }\n\n    function praiseComment(uint256 _commentId) public {\n        // 确保评论存在\n        // require(\n        //     commentMap[_commentId].commentState == 1,\n        //     \"Comment does not exist\"\n        // );\n\n        // 增加评论的赞数\n        // Comment memory comment = commentMap[_commentId];\n        // comment.praiseCount++;\n        commentMap[_commentId].praiseCount++;\n        emit PraiseCommentDone(commentMap[_commentId].praiseCount);\n        // commentMap[_commentId] = comment;\n        // 触发事件\n    }\n\n    function createComplaint(\n        uint256 _contentId,\n        uint256 _userId,\n        uint256 _commentId,\n        string memory _complaintContent\n    ) public {\n        uint256 _complaintId = uint256(\n            keccak256(\n                abi.encodePacked(\n                    block.timestamp,\n                    _contentId,\n                    _userId,\n                    _commentId\n                )\n            )\n        );\n        complainMap[_complaintId] = Complain(\n            _complaintId,\n            _contentId,\n            _userId,\n            _commentId,\n            _complaintContent,\n            block.timestamp,\n            1 // 投诉状态为存在\n        );\n        complainIds.push(_complaintId);\n        emit ComplaintCreated(_complaintId);\n    }\n\n    function getComplain(\n        uint256 _complaintId\n    ) public view returns (ReturnComplain memory) {\n        // 确保投诉存在\n        // require(\n        //     complainMap[_complaintId].complainState == 1,\n        //     \"Complain does not exist\"\n        // );\n\n        Complain memory complain = complainMap[_complaintId];\n        ReturnComplain memory returnComplain = ReturnComplain(\n            uint256ToString(complain.complaintId),\n            uint256ToString(complain.contentId),\n            uint256ToString(complain.userId),\n            uint256ToString(complain.commentId),\n            complain.content,\n            uint256ToString(complain.updateTime),\n            uint256ToString(complain.complainState)\n        );\n        // 返回投诉内容\n        return returnComplain;\n    }\n\n    // 删除投诉\n    function deleteComplain(uint256 _complainId) public {\n        // 确保投诉存在\n        // require(\n        //     complainMap[_complainId].complainState == 1,\n        //     \"Complain does not exist\"\n        // );\n\n        // 删除投诉\n        Complain memory complainDelete = complainMap[_complainId];\n        complainDelete.complainState = 0;\n        complainMap[_complainId] = complainDelete;\n    }\n\n    // 获取被投诉的内容\n    function getAllComplain() public view returns (ReturnComplain[] memory) {\n        uint256 count = complainIds.length;\n        uint256 complainedCount = 0;\n        for (uint256 i = 0; i < count; i++) {\n            if (complainMap[complainIds[i]].complainState == 1) {\n                complainedCount++;\n            }\n        }\n        ReturnComplain[] memory complainedContent = new ReturnComplain[](\n            complainedCount\n        );\n        uint256 index = 0;\n        for (uint256 i = 0; i < count; i++) {\n            if (complainMap[complainIds[i]].complainState == 1) {\n                complainedContent[index] = getComplain(complainIds[i]);\n                index++;\n            }\n        }\n        return complainedContent;\n    }\n\n    // 将 uint256 类型转换为字符串\n    function uint256ToString(\n        uint256 value\n    ) public pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + (value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}